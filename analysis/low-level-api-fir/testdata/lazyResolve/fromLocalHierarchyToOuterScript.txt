RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPORTS:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
TYPES:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
STATUS:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] fromLocalHierarchyToOuterScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
        local open [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        local final [ResolvedTo(RAW_FIR)] class SecondLocalClass : R|LocalClass| {
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=SecondLocalClass] constructor(): R|SecondLocalClass| {
                super<R|LocalClass|>()
            }

            public open override [ResolvedTo(RAW_FIR)] fun boo([ResolvedTo(RAW_FIR)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
