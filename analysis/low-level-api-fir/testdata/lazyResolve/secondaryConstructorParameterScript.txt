RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/A.prop] prop: Int = IntegerLiteral(42), [ResolvedTo(RAW_FIR)] c: String): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val prop: Int = R|<local>/prop|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] str: String): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/A.prop] prop: Int = IntegerLiteral(42), [ResolvedTo(RAW_FIR)] c: String): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val prop: Int = R|<local>/prop|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] str: String): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/A.prop] prop: Int = IntegerLiteral(42), [ResolvedTo(RAW_FIR)] c: String): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val prop: Int = R|<local>/prop|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=A] constructor([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] str: String): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/A.prop] prop: Int = IntegerLiteral(42), [ResolvedTo(RAW_FIR)] c: String): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val prop: Int = R|<local>/prop|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

            public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=A] constructor([ResolvedTo(COMPANION_GENERATION)] str: String): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/A.prop] prop: Int = IntegerLiteral(42), [ResolvedTo(RAW_FIR)] c: String): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val prop: Int = R|<local>/prop|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=A] constructor([ResolvedTo(SUPER_TYPES)] str: String): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(TYPES)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/A.prop] prop: Int = IntegerLiteral(42), [ResolvedTo(RAW_FIR)] c: String): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val prop: Int = R|<local>/prop|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

            public? [ResolvedTo(TYPES)] [ContainingClassKey=A] constructor([ResolvedTo(TYPES)] str: R|kotlin/String|): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/A.prop] prop: R|kotlin/Int| = IntegerLiteral(42), [ResolvedTo(STATUS)] c: R|kotlin/String|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val prop: R|kotlin/Int| = R|<local>/prop|
                public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] str: R|kotlin/String|): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public final [ResolvedTo(STATUS)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/A.prop] prop: R|kotlin/Int| = IntegerLiteral(42), [ResolvedTo(STATUS)] c: R|kotlin/String|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val prop: R|kotlin/Int| = R|<local>/prop|
                public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=A] constructor([ResolvedTo(EXPECT_ACTUAL_MATCHING)] str: R|kotlin/String|): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public final [ResolvedTo(STATUS)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/A.prop] prop: R|kotlin/Int| = IntegerLiteral(42), [ResolvedTo(STATUS)] c: R|kotlin/String|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val prop: R|kotlin/Int| = R|<local>/prop|
                public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] [ContainingClassKey=A] constructor([ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] str: R|kotlin/String|): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public final [ResolvedTo(STATUS)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/A.prop] prop: R|kotlin/Int| = IntegerLiteral(42), [ResolvedTo(STATUS)] c: R|kotlin/String|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val prop: R|kotlin/Int| = R|<local>/prop|
                public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=A] constructor([ResolvedTo(CONTRACTS)] str: R|kotlin/String|): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public final [ResolvedTo(STATUS)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/A.prop] prop: R|kotlin/Int| = IntegerLiteral(42), [ResolvedTo(STATUS)] c: R|kotlin/String|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val prop: R|kotlin/Int| = R|<local>/prop|
                public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=A] constructor([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] str: R|kotlin/String|): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public final [ResolvedTo(STATUS)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/A.prop] prop: R|kotlin/Int| = IntegerLiteral(42), [ResolvedTo(STATUS)] c: R|kotlin/String|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val prop: R|kotlin/Int| = R|<local>/prop|
                public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] [ContainingClassKey=A] constructor([ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] str: R|kotlin/String|): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public final [ResolvedTo(STATUS)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/A.prop] prop: R|kotlin/Int| = IntegerLiteral(42), [ResolvedTo(STATUS)] c: R|kotlin/String|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val prop: R|kotlin/Int| = R|<local>/prop|
                public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor([ResolvedTo(BODY_RESOLVE)] str: R|kotlin/String|): R|A| {
                this<R|A|>(R|<local>/str|.<Unresolved name: myToInt>#(), R|<local>/str|)
            }

            public final [ResolvedTo(STATUS)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] secondaryConstructorParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/A.prop] prop: Int = IntegerLiteral(42), [ResolvedTo(RAW_FIR)] c: String): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val prop: Int = R|<local>/prop|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] str: String): R|A| {
                this<R|A|>(str#.myToInt#(), str#)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                ^foo String(str)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun String.myToInt(): Int {
            ^myToInt IntegerLiteral(42)
        }

