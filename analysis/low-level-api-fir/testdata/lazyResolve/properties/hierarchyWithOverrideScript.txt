RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPORTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
STATUS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

        public open override [ResolvedTo(STATUS)] val str: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] get(): R|kotlin/String|

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
