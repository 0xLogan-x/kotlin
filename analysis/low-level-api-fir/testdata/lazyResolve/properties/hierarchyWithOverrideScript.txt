RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public? abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<<implicit>>()
            }

            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

            public? open? override [ResolvedTo(RAW_FIR)] val str: <implicit> = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] get(): <implicit>

        }

