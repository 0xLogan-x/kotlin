RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


TYPES:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


STATUS:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] anonymousFunctionWithAnnotatedParameterScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](AnnotationTarget#.TYPE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.message] message: String): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val message: String = R|<local>/message|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] val nullablePropertyWithAnnotatedType: @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>?
            public? [ResolvedTo(RAW_FIR)] get(): @Anno[Unresolved](String(outer)) List<@Anno[Unresolved](String(middle)) List<@Anno[Unresolved](String(inner)) Int>>? {
                ^ Null(null)
            }

        public? final? [ResolvedTo(RAW_FIR)] val propertyToResolve: String
            public? [ResolvedTo(RAW_FIR)] get(): String {
                ^ nullablePropertyWithAnnotatedType#?.{ $subj$.let#(<L> = [ResolvedTo(RAW_FIR)] let@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    <strcat>(String( (), it#, String()))
                }
                ) } ?: String()
            }

