RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] localConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> magic(): T {
            ^magic Null(null)!!
        }

        public? final? [ResolvedTo(RAW_FIR)] class Q : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Q] constructor(): R|Q| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> foo(): <implicit> {
                ^foo [ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] class C<[ResolvedTo(RAW_FIR)] G, [ResolvedTo(RAW_FIR)] E, [ResolvedTo(RAW_FIR)] F> : R|kotlin/Any| {
                        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor<[ResolvedTo(RAW_FIR)] G>(): R|Q.C<G, E, F>| {
                            super<R|kotlin/Any|>()
                        }

                        public? final? [ResolvedTo(RAW_FIR)] val e: E = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): E

                        public? final? [ResolvedTo(RAW_FIR)] val f: F = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): F

                        public? final? [ResolvedTo(RAW_FIR)] val g: G = magic#()
                            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] get(): G

                    }

                    C#<F>()
                }

            }

        }

