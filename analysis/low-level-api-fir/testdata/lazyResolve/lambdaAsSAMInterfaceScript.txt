RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(COMPANION_GENERATION)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(SUPER_TYPES)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(TYPES)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public final [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public final [ResolvedTo(CONTRACTS)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public final [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun resolveMe(): R|kotlin/Unit| {
            <Unresolved name: testMe>#(<L> = [ResolvedTo(BODY_RESOLVE)] testMe@fun <anonymous>([ResolvedTo(BODY_RESOLVE)] b: R|kotlin/Nothing|): R|kotlin/Nothing| <inline=Unknown>  {
                R|<local>/b|
            }
            )
        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Arg : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public? final? fun [ResolvedTo(RAW_FIR)] interface Foo : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] a: Arg): Arg

        }

        public? final? [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: Foo): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            testMe#(<L> = [ResolvedTo(RAW_FIR)] testMe@fun <implicit>.<anonymous>([ResolvedTo(RAW_FIR)] b: <implicit>): <implicit> <inline=Unknown>  {
                b#
            }
            )
        }

