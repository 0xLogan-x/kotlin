RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPORTS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
TYPES:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
STATUS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    public final [ResolvedTo(STATUS)] enum class X : R|kotlin/Enum<X>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Enum<X>|>()
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] enum entry A: R|X|
        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|X| {
        }

        public final static [ResolvedTo(STATUS)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<X>|

    }
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.args] args: <ERROR TYPE REF: Symbol not found for A.X>): R|Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val args: <ERROR TYPE REF: Symbol not found for A.X> = R|<local>/args|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): <ERROR TYPE REF: Symbol not found for A.X>

    }
    public final [ResolvedTo(STATUS)] class B : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| {
        }

        @R|Anno|[Types](args = Q|X|.R|/X.A|) public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
