RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] annotationParametersScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] enum class X : R|kotlin/Enum<X>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Enum<X>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] enum entry A: R|X|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun values(): R|kotlin/Array<X>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|X| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] val entries: R|kotlin/enums/EnumEntries<X>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<X>|

        }

        public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.args] args: A.X): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val args: A.X = R|<local>/args|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): A.X

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|kotlin/Any|>()
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            }

            @Anno[Unresolved](X#.A#) public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| {
            }

        }

