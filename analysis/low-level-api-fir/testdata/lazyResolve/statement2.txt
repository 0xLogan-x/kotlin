RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPORTS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
TYPES:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
STATUS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

        public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
            R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
        }

    }
    public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
        ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
    }
    public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
        this@R|special/anonymous|.R|/Builder.version| = String(321)
    }
    )
        public [ResolvedTo(RAW_FIR)] get(): R|Builder|
    public final [ResolvedTo(RAW_FIR)] val $$result: R|kotlin/Unit| = R|/builder|.R|/Builder.execute|()
        public [ResolvedTo(RAW_FIR)] get(): R|kotlin/Unit|
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
