RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


TYPES:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


STATUS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(RAW_FIR)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] statement2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)]
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] var version: R|kotlin/String| = String()
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(BODY_RESOLVE)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] fun build([ResolvedTo(BODY_RESOLVE)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        public final [ResolvedTo(BODY_RESOLVE)] val builder: <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]> = <Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>#(<L> = [ResolvedTo(BODY_RESOLVE)] build@fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
            <Unresolved name: version># = String(321)
        }
        )
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Ambiguity: build, [kotlin/collections/build, kotlin/collections/build, kotlin/collections/build]>

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: <ERROR TYPE REF: Unresolved name: execute> = R|/builder|.<Unresolved name: execute>#()
            public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: execute>

