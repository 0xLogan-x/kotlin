RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] complexLocalHierarchyScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] interface NonLocalInterface : R|kotlin/Any| {
        }

        public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local open [ResolvedTo(RAW_FIR)] class A : B {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|one/A| {
                    super<B>()
                }

            }

            local final? [ResolvedTo(RAW_FIR)] class B : NonLocalInterface {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|one/B| {
                    super<<implicit>>()
                }

                local final? inner [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] class C : A {
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] one/B.constructor(): R|one/B.C| {
                        super<A>()
                    }

                }

            }

        }

