RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPORTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
STATUS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
