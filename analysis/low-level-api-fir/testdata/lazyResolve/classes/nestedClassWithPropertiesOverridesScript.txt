RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPORTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
STATUS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverridesScript.kts
    public abstract [ResolvedTo(STATUS)] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(STATUS)] class ResolveMe : R|OV| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
