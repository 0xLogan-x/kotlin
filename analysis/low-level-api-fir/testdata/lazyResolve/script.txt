RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(COMPANION_GENERATION)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(SUPER_TYPES)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

TYPES:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(TYPES)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

STATUS:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(STATUS)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(EXPECT_ACTUAL_MATCHING)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(CONTRACTS)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()

FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] enum class En : R|kotlin/Enum<En>| {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] constructor(): R|En| {
                super<R|kotlin/Enum<En>|>()
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] enum entry Entry: R|En|
            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun values(): R|kotlin/Array<En>| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|En| {
            }

            public final static [ResolvedTo(RAW_FIR)] [ContainingClassKey=En] val entries: R|kotlin/enums/EnumEntries<En>|
                public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<En>|

        }

        @Target[Unresolved](AnnotationTarget#.EXPRESSION#, AnnotationTarget#.FUNCTION#) @Retention[Unresolved](AnnotationRetention#.SOURCE#) public? final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.s] s: En): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: En = R|<local>/s|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): En

        }

        @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> {
            ^build Builder#().apply#(action#)
        }

        @Anno[Unresolved](En#.Entry#) build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(123)
            local final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                @Anno[Unresolved](En#.Entry#) public? final? [ResolvedTo(RAW_FIR)] fun doo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit| {
                }

            }

            execute#()
        }
        )
        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = build#(<L> = [ResolvedTo(RAW_FIR)] build@fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
            version# = String(321)
        }
        )
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        @Anno[Unresolved](En#.Entry#) builder#.execute#()
        builder#.version# = String()
