KT element: KtNameReferenceExpression
FIR element: FirResolvedNamedReferenceImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
R|/A.prop|

FIR FILE:
FILE: [ResolvedTo(IMPORTS)] qualifiedCallInsideSuperCallScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor([ResolvedTo(STATUS)] init: R|A.() -> kotlin/Unit|): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(CONTRACTS)] val prop: R|kotlin/String| = String()
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=A] get(): R|kotlin/String|

        }

        public final [ResolvedTo(STATUS)] object B : R|A| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor(): R|B| {
                super<R|A|>([ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    ^ Unit
                }
                )
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] object C : R|A| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=C] constructor(): R|C| {
                super<R|A|>([ResolvedTo(RAW_FIR)] fun R|A|.<anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
                    local final [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/String| {
                        ^foo Q|B|.R|/A.prop|.R|kotlin/String.toString|()
                    }

                }
                )
            }

        }