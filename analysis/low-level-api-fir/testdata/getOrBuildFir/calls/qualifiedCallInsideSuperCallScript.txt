KT element: KtNameReferenceExpression
FIR element: FirPropertyAccessExpressionImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
B#.prop#

FIR FILE:
FILE: [ResolvedTo(IMPORTS)] qualifiedCallInsideSuperCallScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? open [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor([ResolvedTo(RAW_FIR)] init: ( A.() -> Unit )): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] val prop: String = String()
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] object B : A {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
                super<A>([ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    ^ Unit
                }
                )
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] object C : A {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                super<A>([ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                        ^foo B#.prop#.toString#()
                    }

                }
                )
            }

        }