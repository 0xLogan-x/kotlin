FILE: [ResolvedTo(IMPORTS)] withoutNameScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun <no name provided>([ResolvedTo(RAW_FIR)] a: Int = IntegerLiteral(1)): String {
            ^<no name provided> String(str)
        }

        public? final? [ResolvedTo(RAW_FIR)] fun <no name provided>(): R|kotlin/Unit| {
        }

        public? final? [ResolvedTo(RAW_FIR)] val <no name provided>: Int = IntegerLiteral(4)
            public? [ResolvedTo(RAW_FIR)] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] var <no name provided>: Int
            public? [ResolvedTo(RAW_FIR)] get(): Int {
                ^ IntegerLiteral(4)
            }
            public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: Int): R|kotlin/Unit| {
            }

        public? final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] constructor(): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <no name provided>([ResolvedTo(RAW_FIR)] a: Int = IntegerLiteral(1)): String {
                ^<no name provided> String(str)
            }

            public? final? [ResolvedTo(RAW_FIR)] fun <no name provided>(): R|kotlin/Unit| {
            }

            public? final? [ResolvedTo(RAW_FIR)] val <no name provided>: Int = IntegerLiteral(4)
                public? [ResolvedTo(RAW_FIR)] get(): Int

            public? final? [ResolvedTo(RAW_FIR)] var <no name provided>: Boolean
                public? [ResolvedTo(RAW_FIR)] get(): Boolean {
                    ^ Boolean(true)
                }
                public? [ResolvedTo(RAW_FIR)] set([ResolvedTo(RAW_FIR)] value: Boolean): R|kotlin/Unit| {
                }

        }

