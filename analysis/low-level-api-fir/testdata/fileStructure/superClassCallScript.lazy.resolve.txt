FILE: [ResolvedTo(IMPORTS)] superClassCallScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? open [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] constructor([ResolvedTo(RAW_FIR)] init: ( A.() -> Unit )): R|A| {
                super<R|kotlin/Any|>()
            }

            public? final? [ResolvedTo(RAW_FIR)] val prop: String = String()
                public? [ResolvedTo(RAW_FIR)] get(): String

        }

        public? final? [ResolvedTo(RAW_FIR)] class B : A {
            public? [ResolvedTo(RAW_FIR)] constructor(): R|B| {
                super<A>()
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] object C : A {
            private [ResolvedTo(RAW_FIR)] constructor(): R|C| {
                super<A>([ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                        ^foo B#.prop#.toString#()
                    }

                }
                )
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] val f: <implicit> = object : A {
            private [ResolvedTo(RAW_FIR)] constructor(): R|<anonymous>| {
                super<A>([ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> {
                        ^bar B#.prop#.toString#()
                    }

                }
                )
            }

        }

            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] class D : A {
            public? [ResolvedTo(RAW_FIR)] error_constructor(): R|D| {
                super<A>([ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> {
                        ^foo B#.prop#.toString#()
                    }

                }
                )
            }

            public? [ResolvedTo(RAW_FIR)] constructor(): R|D| {
                super<A>([ResolvedTo(RAW_FIR)] fun <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                    local final? [ResolvedTo(RAW_FIR)] fun boo(): <implicit> {
                        ^boo prop#.toString#()
                    }

                }
                )
            }

        }

