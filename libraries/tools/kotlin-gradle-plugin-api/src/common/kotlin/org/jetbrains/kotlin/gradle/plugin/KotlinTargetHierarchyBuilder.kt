// DO NOT EDIT MANUALLY! Generated by org.jetbrains.kotlin.generators.gradle.dsl.MppKotlinTargetHierarchyBuilderCodegenKt

package org.jetbrains.kotlin.gradle.plugin

import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi
import org.jetbrains.kotlin.konan.target.DEPRECATED_TARGET_MESSAGE

@KotlinTargetsDsl
@ExperimentalKotlinGradlePluginApi
interface KotlinTargetHierarchyBuilder {

    interface Root : KotlinTargetHierarchyBuilder {
        fun sourceSetTrees(vararg tree: KotlinTargetHierarchy.SourceSetTree)
        fun withSourceSetTree(vararg tree: KotlinTargetHierarchy.SourceSetTree)
        fun excludeSourceSetTree(vararg tree: KotlinTargetHierarchy.SourceSetTree)
    }

    /* Declaring groups */

    /**
     * Shortcut for `group("common") { }`:
     * Most hierarchies should attach their nodes/groups to 'common'
     *
     * e.g.
     * ```
     * common {
     *     group("native") {
     *         withIos()
     *         withMacos()
     *     }
     * }
     * ```
     * applying the shown hierarchy to the main compilations will create a 'nativeMain' source set which will
     * depend on the usual 'commonMain'
     *
     */
    fun common(build: KotlinTargetHierarchyBuilder.() -> Unit) = group("common", build)
    fun group(name: String, build: KotlinTargetHierarchyBuilder.() -> Unit = {})

    /* low-level APIs */
    fun withCompilations(predicate: (KotlinCompilation<*>) -> Boolean)

    fun excludeCompilations(predicate: (KotlinCompilation<*>) -> Boolean)

    @Deprecated("Use 'excludeCompilations' instead", ReplaceWith("excludeCompilations(predicate)"))
    fun withoutCompilations(predicate: (KotlinCompilation<*>) -> Boolean) = excludeCompilations(predicate)

    @Deprecated("Use plain 'withoutCompilations(!predicate) instead'", ReplaceWith("withoutCompilations { !predicate(it) }"))
    fun filterCompilations(predicate: (KotlinCompilation<*>) -> Boolean) = excludeCompilations { !predicate(it) }

    /* Convenient groups */
    fun withNative()
    fun withApple()
    fun withIos()
    fun withWatchos()
    fun withMacos()
    fun withTvos()
    fun withMingw()
    fun withLinux()
    fun withAndroidNative()

    /* Actual targets */
    fun withJs()
    fun withWasm()
    fun withJvm()
    fun withAndroid()
    fun withAndroidNativeX64()
    fun withAndroidNativeX86()
    fun withAndroidNativeArm32()
    fun withAndroidNativeArm64()
    fun withIosArm32()
    fun withIosArm64()
    fun withIosX64()
    fun withIosSimulatorArm64()
    fun withWatchosArm32()
    fun withWatchosArm64()
    fun withWatchosX64()
    fun withWatchosSimulatorArm64()
    fun withWatchosDeviceArm64()
    fun withTvosArm64()
    fun withTvosX64()
    fun withTvosSimulatorArm64()
    fun withLinuxX64()
    fun withMingwX64()
    fun withMacosX64()
    fun withMacosArm64()
    fun withLinuxArm64()

    @Deprecated(DEPRECATED_TARGET_MESSAGE)
    fun withWatchosX86()

    @Deprecated(DEPRECATED_TARGET_MESSAGE)
    fun withMingwX86()

    @Deprecated(DEPRECATED_TARGET_MESSAGE)
    fun withLinuxArm32Hfp()

    @Deprecated(DEPRECATED_TARGET_MESSAGE)
    fun withLinuxMips32()

    @Deprecated(DEPRECATED_TARGET_MESSAGE)
    fun withLinuxMipsel32()

    @Deprecated(DEPRECATED_TARGET_MESSAGE)
    fun withWasm32()
}
