@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
%class.classname_A = type { i32 }
define weak void @classname_A_Int(%class.classname_A*  %classvariable.this, i32  %classname_A.x) #0
{
%classvariable.this.addr = alloca %class.classname_A, align 8
%classname_A.x.addr = alloca i32, align 4
store i32 %classname_A.x, i32* %classname_A.x.addr, align 4
%var2 = load i32* %classname_A.x.addr, align 4
%var3 = getelementptr inbounds %class.classname_A* %classvariable.this.addr, i32 0, i32 0
store i32 %var2, i32* %var3, align 4
%var4 = bitcast %class.classname_A* %classvariable.this to i8*
%var5 = bitcast %class.classname_A* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var4, i8* %var5, i64 4, i32 4, i1 false)
ret void 
unreachable
}
define weak i32 @classname_A.method(%class.classname_A*  %classvariable.this) #0
{
%var6 = getelementptr inbounds %class.classname_A* %classvariable.this, i32 0, i32 0
%var7 = load i32* %var6, align 4
%var8 = add nsw i32 %var7, 5
ret i32 %var8
unreachable
}
define weak i32 @simply_class_1_Int(i32  %simply_class_1.zz) #0
{
%simply_class_1.zz.addr = alloca i32, align 4
store i32 %simply_class_1.zz, i32* %simply_class_1.zz.addr, align 4
%var9 = load i32* %simply_class_1.zz.addr, align 4
%var11 = call i8* @malloc_heap(i32 4)
%var10 = bitcast i8* %var11 to %class.classname_A*
%var12 = alloca %class.classname_A*, align 8
store %class.classname_A* %var10, %class.classname_A** %var12, align 8
call void @classname_A_Int(%class.classname_A* %var10, i32 %var9)
%managed.unique.0.simply_class_1.x = alloca %class.classname_A*, align 8
%var13 = load %class.classname_A** %managed.unique.0.simply_class_1.x, align 8
%var14 = load %class.classname_A** %var12, align 8
store %class.classname_A* %var14, %class.classname_A** %managed.unique.0.simply_class_1.x, align 8
%var15 = load %class.classname_A** %managed.unique.0.simply_class_1.x, align 8
%var16 = call i32 @classname_A.method(%class.classname_A* %var15)
%var17 = alloca i32, align 4
store i32 %var16, i32* %var17, align 4
%var18 = load i32* %var17, align 4
ret i32 %var18
unreachable
}

