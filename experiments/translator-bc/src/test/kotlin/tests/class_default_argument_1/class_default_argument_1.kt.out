@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
%class.class_default_argument_1_class = type { i32 }
define weak void @class_default_argument_1_class_Int(%class.class_default_argument_1_class*  %classvariable.this, i32  %class_default_argument_1_class.classArg) #0
{
%classvariable.this.addr = alloca %class.class_default_argument_1_class, align 8
%class_default_argument_1_class.classArg.addr = alloca i32, align 4
store i32 %class_default_argument_1_class.classArg, i32* %class_default_argument_1_class.classArg.addr, align 4
%var2 = load i32* %class_default_argument_1_class.classArg.addr, align 4
%var3 = getelementptr inbounds %class.class_default_argument_1_class* %classvariable.this.addr, i32 0, i32 0
store i32 %var2, i32* %var3, align 4
%var4 = bitcast %class.class_default_argument_1_class* %classvariable.this to i8*
%var5 = bitcast %class.class_default_argument_1_class* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var4, i8* %var5, i64 4, i32 4, i1 false)
ret void 
unreachable
}
define weak i32 @class_default_argument_1_class.getDefaultValue_Int_Int(%class.class_default_argument_1_class*  %classvariable.this, i32  %class_default_argument_1_class.getDefaultValue.arg1, i32  %class_default_argument_1_class.getDefaultValue.arg2) #0
{
%class_default_argument_1_class.getDefaultValue.arg1.addr = alloca i32, align 4
store i32 %class_default_argument_1_class.getDefaultValue.arg1, i32* %class_default_argument_1_class.getDefaultValue.arg1.addr, align 4
%class_default_argument_1_class.getDefaultValue.arg2.addr = alloca i32, align 4
store i32 %class_default_argument_1_class.getDefaultValue.arg2, i32* %class_default_argument_1_class.getDefaultValue.arg2.addr, align 4
%var6 = load i32* %class_default_argument_1_class.getDefaultValue.arg1.addr, align 4
%var7 = load i32* %class_default_argument_1_class.getDefaultValue.arg2.addr, align 4
%var8 = add nsw i32 %var6, %var7
ret i32 %var8
unreachable
}
define weak i32 @class_default_argument_1_Int(i32  %class_default_argument_1.z) #0
{
%class_default_argument_1.z.addr = alloca i32, align 4
store i32 %class_default_argument_1.z, i32* %class_default_argument_1.z.addr, align 4
%var10 = call i8* @malloc_heap(i32 4)
%var9 = bitcast i8* %var10 to %class.class_default_argument_1_class*
%var11 = alloca %class.class_default_argument_1_class*, align 8
store %class.class_default_argument_1_class* %var9, %class.class_default_argument_1_class** %var11, align 8
call void @class_default_argument_1_class_Int(%class.class_default_argument_1_class* %var9, i32 11)
%managed.unique.0.class_default_argument_1.instance = alloca %class.class_default_argument_1_class*, align 8
%var12 = load %class.class_default_argument_1_class** %managed.unique.0.class_default_argument_1.instance, align 8
%var13 = load %class.class_default_argument_1_class** %var11, align 8
store %class.class_default_argument_1_class* %var13, %class.class_default_argument_1_class** %managed.unique.0.class_default_argument_1.instance, align 8
%var14 = load %class.class_default_argument_1_class** %managed.unique.0.class_default_argument_1.instance, align 8
%var15 = load i32* %class_default_argument_1.z.addr, align 4
%var16 = call i32 @class_default_argument_1_class.getDefaultValue_Int_Int(%class.class_default_argument_1_class* %var14, i32 %var15, i32 11)
%var17 = alloca i32, align 4
store i32 %var16, i32* %var17, align 4
%var18 = load i32* %var17, align 4
ret i32 %var18
unreachable
}

