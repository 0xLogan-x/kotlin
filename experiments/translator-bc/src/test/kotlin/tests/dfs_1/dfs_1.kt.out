@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
%class.dfs_1_Node = type { %class.dfs_1_Node*, %class.dfs_1_Node*, i32 }
define weak void @dfs_1_Node(%class.dfs_1_Node*  %classvariable.this) #0
{
%classvariable.this.addr = alloca %class.dfs_1_Node, align 8
%var2 = getelementptr inbounds %class.dfs_1_Node* %classvariable.this.addr, i32 0, i32 1
%var3 = load %class.dfs_1_Node** %var2, align 8
store %class.dfs_1_Node* null, %class.dfs_1_Node** %var2, align 8
%var4 = getelementptr inbounds %class.dfs_1_Node* %classvariable.this.addr, i32 0, i32 0
%var5 = load %class.dfs_1_Node** %var4, align 8
store %class.dfs_1_Node* null, %class.dfs_1_Node** %var4, align 8
%var6 = getelementptr inbounds %class.dfs_1_Node* %classvariable.this.addr, i32 0, i32 2
%var7 = load i32* %var6, align 4
store i32 0, i32* %var6, align 4
%var8 = bitcast %class.dfs_1_Node* %classvariable.this to i8*
%var9 = bitcast %class.dfs_1_Node* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var8, i8* %var9, i64 24, i32 4, i1 false)
ret void 
unreachable
}
define weak void @dfs_1_search_Ref_dfs_1_Node_Int(%class.dfs_1_Node**  %instance, %class.dfs_1_Node*  %dfs_1_search.x, i32  %dfs_1_search.value) #0
{
%dfs_1_search.value.addr = alloca i32, align 4
store i32 %dfs_1_search.value, i32* %dfs_1_search.value.addr, align 4
%var10 = getelementptr inbounds %class.dfs_1_Node* %dfs_1_search.x, i32 0, i32 2
%var11 = load i32* %var10, align 4
%var12 = load i32* %dfs_1_search.value.addr, align 4
%var13 = icmp eq i32 %var11, %var12
br i1 %var13, label %label.if.1, label %label.if.3
label.if.1:
store %class.dfs_1_Node* %dfs_1_search.x, %class.dfs_1_Node** %instance, align 8
ret void 
br label %label.if.3
label.if.3:
%var14 = getelementptr inbounds %class.dfs_1_Node* %dfs_1_search.x, i32 0, i32 0
%var15 = load %class.dfs_1_Node** %var14, align 8
%var16 = load %class.dfs_1_Node** %var14, align 8
%var17 = icmp ne %class.dfs_1_Node* %var16, null
br i1 %var17, label %label.if.4, label %label.if.6
label.if.4:
%var18 = getelementptr inbounds %class.dfs_1_Node* %dfs_1_search.x, i32 0, i32 0
%var20 = load %class.dfs_1_Node** %var18, align 8
%var19 = icmp eq %class.dfs_1_Node* null, %var20
br i1 %var19, label %label.nullCheck.7, label %label.nullCheck.8
label.nullCheck.7:
%var21 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([59 x i8]* @exceptions.str.1, i32 0, i32 0))
call void @abort()
br label %label.nullCheck.8
label.nullCheck.8:
%var22 = getelementptr inbounds %class.dfs_1_Node* %dfs_1_search.x, i32 0, i32 0
%var24 = load %class.dfs_1_Node** %var22, align 8
%var23 = icmp eq %class.dfs_1_Node* null, %var24
br i1 %var23, label %label.nullCheck.9, label %label.nullCheck.10
label.nullCheck.9:
%var25 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([59 x i8]* @exceptions.str.1, i32 0, i32 0))
call void @abort()
br label %label.nullCheck.10
label.nullCheck.10:
%var26 = load %class.dfs_1_Node** %var22, align 8
%var27 = load i32* %dfs_1_search.value.addr, align 4
%var29 = call i8* @malloc_heap(i32 8)
%var28 = bitcast i8* %var29 to %class.dfs_1_Node**
call void @dfs_1_search_Ref_dfs_1_Node_Int(%class.dfs_1_Node** %var28, %class.dfs_1_Node* %var26, i32 %var27)
%managed.unique.0.dfs_1_search.result = alloca %class.dfs_1_Node*, align 8
%var30 = load %class.dfs_1_Node** %managed.unique.0.dfs_1_search.result, align 8
%var31 = load %class.dfs_1_Node** %var28, align 8
store %class.dfs_1_Node* %var31, %class.dfs_1_Node** %managed.unique.0.dfs_1_search.result, align 8
%var32 = load %class.dfs_1_Node** %managed.unique.0.dfs_1_search.result, align 8
%var33 = load %class.dfs_1_Node** %managed.unique.0.dfs_1_search.result, align 8
%var34 = icmp ne %class.dfs_1_Node* %var33, null
br i1 %var34, label %label.if.11, label %label.if.13
label.if.11:
%var35 = load %class.dfs_1_Node** %managed.unique.0.dfs_1_search.result, align 8
store %class.dfs_1_Node* %var35, %class.dfs_1_Node** %instance, align 8
ret void 
br label %label.if.13
label.if.13:
br label %label.if.6
label.if.6:
%var36 = getelementptr inbounds %class.dfs_1_Node* %dfs_1_search.x, i32 0, i32 1
%var37 = load %class.dfs_1_Node** %var36, align 8
%var38 = load %class.dfs_1_Node** %var36, align 8
%var39 = icmp ne %class.dfs_1_Node* %var38, null
br i1 %var39, label %label.if.14, label %label.if.16
label.if.14:
%var40 = getelementptr inbounds %class.dfs_1_Node* %dfs_1_search.x, i32 0, i32 1
%var42 = load %class.dfs_1_Node** %var40, align 8
%var41 = icmp eq %class.dfs_1_Node* null, %var42
br i1 %var41, label %label.nullCheck.17, label %label.nullCheck.18
label.nullCheck.17:
%var43 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([59 x i8]* @exceptions.str.1, i32 0, i32 0))
call void @abort()
br label %label.nullCheck.18
label.nullCheck.18:
%var44 = getelementptr inbounds %class.dfs_1_Node* %dfs_1_search.x, i32 0, i32 1
%var46 = load %class.dfs_1_Node** %var44, align 8
%var45 = icmp eq %class.dfs_1_Node* null, %var46
br i1 %var45, label %label.nullCheck.19, label %label.nullCheck.20
label.nullCheck.19:
%var47 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([59 x i8]* @exceptions.str.1, i32 0, i32 0))
call void @abort()
br label %label.nullCheck.20
label.nullCheck.20:
%var48 = load %class.dfs_1_Node** %var44, align 8
%var49 = load i32* %dfs_1_search.value.addr, align 4
%var51 = call i8* @malloc_heap(i32 8)
%var50 = bitcast i8* %var51 to %class.dfs_1_Node**
call void @dfs_1_search_Ref_dfs_1_Node_Int(%class.dfs_1_Node** %var50, %class.dfs_1_Node* %var48, i32 %var49)
%managed.unique.1.dfs_1_search.result = alloca %class.dfs_1_Node*, align 8
%var52 = load %class.dfs_1_Node** %managed.unique.1.dfs_1_search.result, align 8
%var53 = load %class.dfs_1_Node** %var50, align 8
store %class.dfs_1_Node* %var53, %class.dfs_1_Node** %managed.unique.1.dfs_1_search.result, align 8
%var54 = load %class.dfs_1_Node** %managed.unique.1.dfs_1_search.result, align 8
%var55 = load %class.dfs_1_Node** %managed.unique.1.dfs_1_search.result, align 8
%var56 = icmp ne %class.dfs_1_Node* %var55, null
br i1 %var56, label %label.if.21, label %label.if.23
label.if.21:
%var57 = load %class.dfs_1_Node** %managed.unique.1.dfs_1_search.result, align 8
store %class.dfs_1_Node* %var57, %class.dfs_1_Node** %instance, align 8
ret void 
br label %label.if.23
label.if.23:
br label %label.if.16
label.if.16:
store %class.dfs_1_Node* null, %class.dfs_1_Node** %instance, align 1
ret void 
unreachable
}
define weak i32 @dfs_1_Int(i32  %dfs_1.searchObject) #0
{
%dfs_1.searchObject.addr = alloca i32, align 4
store i32 %dfs_1.searchObject, i32* %dfs_1.searchObject.addr, align 4
%managed.unique.2.dfs_1.i = alloca i32, align 4
%var58 = load i32* %managed.unique.2.dfs_1.i, align 4
store i32 0, i32* %managed.unique.2.dfs_1.i, align 4
%var60 = call i8* @malloc_heap(i32 24)
%var59 = bitcast i8* %var60 to %class.dfs_1_Node*
%var61 = alloca %class.dfs_1_Node*, align 8
store %class.dfs_1_Node* %var59, %class.dfs_1_Node** %var61, align 8
call void @dfs_1_Node(%class.dfs_1_Node* %var59)
%managed.unique.3.dfs_1.root = alloca %class.dfs_1_Node*, align 8
%var62 = load %class.dfs_1_Node** %managed.unique.3.dfs_1.root, align 8
%var63 = load %class.dfs_1_Node** %var61, align 8
store %class.dfs_1_Node* %var63, %class.dfs_1_Node** %managed.unique.3.dfs_1.root, align 8
%var65 = load %class.dfs_1_Node** %managed.unique.3.dfs_1.root, align 8
%var64 = icmp eq %class.dfs_1_Node* null, %var65
br i1 %var64, label %label.nullCheck.24, label %label.nullCheck.25
label.nullCheck.24:
%var66 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([59 x i8]* @exceptions.str.1, i32 0, i32 0))
call void @abort()
br label %label.nullCheck.25
label.nullCheck.25:
%var67 = load %class.dfs_1_Node** %managed.unique.3.dfs_1.root, align 8
%var68 = getelementptr inbounds %class.dfs_1_Node* %var67, i32 0, i32 2
%var69 = load i32* %var68, align 4
store i32 111, i32* %var68, align 4
%managed.unique.4.dfs_1.current = alloca %class.dfs_1_Node*, align 8
%var70 = load %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var71 = load %class.dfs_1_Node** %managed.unique.3.dfs_1.root, align 8
store %class.dfs_1_Node* %var71, %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
br label %label.while.26
label.while.26:
%var72 = load i32* %managed.unique.2.dfs_1.i, align 4
%var73 = icmp slt i32 %var72, 10
br i1 %var73, label %label.while.27, label %label.while.28
label.while.27:
%var75 = load %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var74 = icmp eq %class.dfs_1_Node* null, %var75
br i1 %var74, label %label.nullCheck.29, label %label.nullCheck.30
label.nullCheck.29:
%var76 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([59 x i8]* @exceptions.str.1, i32 0, i32 0))
call void @abort()
br label %label.nullCheck.30
label.nullCheck.30:
%var77 = load %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var78 = getelementptr inbounds %class.dfs_1_Node* %var77, i32 0, i32 0
%var80 = call i8* @malloc_heap(i32 24)
%var79 = bitcast i8* %var80 to %class.dfs_1_Node*
%var81 = alloca %class.dfs_1_Node*, align 8
store %class.dfs_1_Node* %var79, %class.dfs_1_Node** %var81, align 8
call void @dfs_1_Node(%class.dfs_1_Node* %var79)
%var82 = load %class.dfs_1_Node** %var78, align 8
%var83 = load %class.dfs_1_Node** %var81, align 8
store %class.dfs_1_Node* %var83, %class.dfs_1_Node** %var78, align 8
%var84 = load %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var85 = getelementptr inbounds %class.dfs_1_Node* %var84, i32 0, i32 1
%var87 = call i8* @malloc_heap(i32 24)
%var86 = bitcast i8* %var87 to %class.dfs_1_Node*
%var88 = alloca %class.dfs_1_Node*, align 8
store %class.dfs_1_Node* %var86, %class.dfs_1_Node** %var88, align 8
call void @dfs_1_Node(%class.dfs_1_Node* %var86)
%var89 = load %class.dfs_1_Node** %var85, align 8
%var90 = load %class.dfs_1_Node** %var88, align 8
store %class.dfs_1_Node* %var90, %class.dfs_1_Node** %var85, align 8
%var91 = load %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var92 = getelementptr inbounds %class.dfs_1_Node* %var91, i32 0, i32 2
%var93 = load i32* %var92, align 4
%var94 = load i32* %managed.unique.2.dfs_1.i, align 4
store i32 %var94, i32* %var92, align 4
%var95 = load %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var96 = getelementptr inbounds %class.dfs_1_Node* %var95, i32 0, i32 0
%var97 = load %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var98 = load %class.dfs_1_Node** %var96, align 8
store %class.dfs_1_Node* %var98, %class.dfs_1_Node** %managed.unique.4.dfs_1.current, align 8
%var99 = load i32* %managed.unique.2.dfs_1.i, align 4
%var100 = alloca i32, align 4
%var101 = load i32* %managed.unique.2.dfs_1.i, align 4
store i32 %var101, i32* %var100, align 4
%var102 = add nsw i32 %var99, 1
store i32 %var102, i32* %managed.unique.2.dfs_1.i, align 4
br label %label.while.26
label.while.28:
%var103 = load %class.dfs_1_Node** %managed.unique.3.dfs_1.root, align 8
%var104 = load i32* %dfs_1.searchObject.addr, align 4
%var106 = call i8* @malloc_heap(i32 8)
%var105 = bitcast i8* %var106 to %class.dfs_1_Node**
call void @dfs_1_search_Ref_dfs_1_Node_Int(%class.dfs_1_Node** %var105, %class.dfs_1_Node* %var103, i32 %var104)
%managed.unique.5.dfs_1.result = alloca %class.dfs_1_Node*, align 8
%var107 = load %class.dfs_1_Node** %managed.unique.5.dfs_1.result, align 8
%var108 = load %class.dfs_1_Node** %var105, align 8
store %class.dfs_1_Node* %var108, %class.dfs_1_Node** %managed.unique.5.dfs_1.result, align 8
%var109 = load %class.dfs_1_Node** %managed.unique.5.dfs_1.result, align 8
%var110 = load %class.dfs_1_Node** %managed.unique.5.dfs_1.result, align 8
%var111 = icmp eq %class.dfs_1_Node* %var110, null
br i1 %var111, label %label.if.31, label %label.if.32
label.if.31:
%var112 = sub nsw i32 0, 101
ret i32 %var112
br label %label.if.33
label.if.32:
%var113 = load %class.dfs_1_Node** %managed.unique.5.dfs_1.result, align 8
%var114 = getelementptr inbounds %class.dfs_1_Node* %var113, i32 0, i32 2
%var115 = load i32* %var114, align 4
ret i32 %var115
br label %label.if.33
label.if.33:
unreachable
}

