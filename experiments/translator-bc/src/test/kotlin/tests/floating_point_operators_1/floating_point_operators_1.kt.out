@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
define weak i32 @floating_point_operators_1_double_leq_Double_Double(double  %floating_point_operators_1_double_leq.x, double  %floating_point_operators_1_double_leq.y) #0
{
%floating_point_operators_1_double_leq.x.addr = alloca double, align 8
store double %floating_point_operators_1_double_leq.x, double* %floating_point_operators_1_double_leq.x.addr, align 8
%floating_point_operators_1_double_leq.y.addr = alloca double, align 8
store double %floating_point_operators_1_double_leq.y, double* %floating_point_operators_1_double_leq.y.addr, align 8
%var2 = load double* %floating_point_operators_1_double_leq.x.addr, align 8
%var3 = load double* %floating_point_operators_1_double_leq.y.addr, align 8
%var4 = fcmp olt double %var2, %var3
br i1 %var4, label %label.if.1, label %label.if.2
label.if.1:
ret i32 1
br label %label.if.3
label.if.2:
ret i32 0
br label %label.if.3
label.if.3:
unreachable
}
define weak i1 @floating_point_operators_1_getValue_Boolean(i1  %floating_point_operators_1_getValue.b) #0
{
%floating_point_operators_1_getValue.b.addr = alloca i1, align 4
store i1 %floating_point_operators_1_getValue.b, i1* %floating_point_operators_1_getValue.b.addr, align 4
%var5 = load i1* %floating_point_operators_1_getValue.b.addr, align 4
ret i1 %var5
unreachable
}

