@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
%class.class_method_access_1_owner = type { %class.class_method_access_1_donor*, i32 }
%class.class_method_access_1_donor = type { i32 }
define weak void @class_method_access_1_owner_Ref_class_method_access_1_donor(%class.class_method_access_1_owner*  %classvariable.this, %class.class_method_access_1_donor*  %class_method_access_1_owner.arg) #0
{
%classvariable.this.addr = alloca %class.class_method_access_1_owner, align 8
%var2 = getelementptr inbounds %class.class_method_access_1_owner* %classvariable.this.addr, i32 0, i32 0
store %class.class_method_access_1_donor* %class_method_access_1_owner.arg, %class.class_method_access_1_donor** %var2, align 8
%var3 = getelementptr inbounds %class.class_method_access_1_owner* %classvariable.this.addr, i32 0, i32 1
%var4 = load i32* %var3, align 4
store i32 56, i32* %var3, align 4
%var5 = bitcast %class.class_method_access_1_owner* %classvariable.this to i8*
%var6 = bitcast %class.class_method_access_1_owner* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var5, i8* %var6, i64 16, i32 4, i1 false)
ret void 
unreachable
}
define weak i32 @class_method_access_1_owner.getSize(%class.class_method_access_1_owner*  %classvariable.this) #0
{
%var7 = getelementptr inbounds %class.class_method_access_1_owner* %classvariable.this, i32 0, i32 0
%var8 = load %class.class_method_access_1_donor** %var7, align 8
%var9 = call i32 @class_method_access_1_donor.getSizeVal(%class.class_method_access_1_donor* %var8)
%var10 = alloca i32, align 4
store i32 %var9, i32* %var10, align 4
%var11 = load i32* %var10, align 4
%var12 = add nsw i32 %var11, 8
ret i32 %var12
unreachable
}
define weak void @class_method_access_1_donor_Int(%class.class_method_access_1_donor*  %classvariable.this, i32  %class_method_access_1_donor.size) #0
{
%classvariable.this.addr = alloca %class.class_method_access_1_donor, align 8
%class_method_access_1_donor.size.addr = alloca i32, align 4
store i32 %class_method_access_1_donor.size, i32* %class_method_access_1_donor.size.addr, align 4
%var13 = load i32* %class_method_access_1_donor.size.addr, align 4
%var14 = getelementptr inbounds %class.class_method_access_1_donor* %classvariable.this.addr, i32 0, i32 0
store i32 %var13, i32* %var14, align 4
%var15 = bitcast %class.class_method_access_1_donor* %classvariable.this to i8*
%var16 = bitcast %class.class_method_access_1_donor* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var15, i8* %var16, i64 4, i32 4, i1 false)
ret void 
unreachable
}
define weak i32 @class_method_access_1_donor.getSizeVal(%class.class_method_access_1_donor*  %classvariable.this) #0
{
%var17 = getelementptr inbounds %class.class_method_access_1_donor* %classvariable.this, i32 0, i32 0
%var18 = load i32* %var17, align 4
%var19 = add nsw i32 %var18, 4
ret i32 %var19
unreachable
}
define weak i32 @class_method_access_1_test_Int(i32  %class_method_access_1_test.x) #0
{
%class_method_access_1_test.x.addr = alloca i32, align 4
store i32 %class_method_access_1_test.x, i32* %class_method_access_1_test.x.addr, align 4
%var20 = load i32* %class_method_access_1_test.x.addr, align 4
%var22 = call i8* @malloc_heap(i32 4)
%var21 = bitcast i8* %var22 to %class.class_method_access_1_donor*
%var23 = alloca %class.class_method_access_1_donor*, align 8
store %class.class_method_access_1_donor* %var21, %class.class_method_access_1_donor** %var23, align 8
call void @class_method_access_1_donor_Int(%class.class_method_access_1_donor* %var21, i32 %var20)
%managed.unique.0.class_method_access_1_test.instance_donor = alloca %class.class_method_access_1_donor*, align 8
%var24 = load %class.class_method_access_1_donor** %managed.unique.0.class_method_access_1_test.instance_donor, align 8
%var25 = load %class.class_method_access_1_donor** %var23, align 8
store %class.class_method_access_1_donor* %var25, %class.class_method_access_1_donor** %managed.unique.0.class_method_access_1_test.instance_donor, align 8
%var26 = load %class.class_method_access_1_donor** %managed.unique.0.class_method_access_1_test.instance_donor, align 8
%var28 = call i8* @malloc_heap(i32 16)
%var27 = bitcast i8* %var28 to %class.class_method_access_1_owner*
%var29 = alloca %class.class_method_access_1_owner*, align 8
store %class.class_method_access_1_owner* %var27, %class.class_method_access_1_owner** %var29, align 8
call void @class_method_access_1_owner_Ref_class_method_access_1_donor(%class.class_method_access_1_owner* %var27, %class.class_method_access_1_donor* %var26)
%managed.unique.1.class_method_access_1_test.instance_owner = alloca %class.class_method_access_1_owner*, align 8
%var30 = load %class.class_method_access_1_owner** %managed.unique.1.class_method_access_1_test.instance_owner, align 8
%var31 = load %class.class_method_access_1_owner** %var29, align 8
store %class.class_method_access_1_owner* %var31, %class.class_method_access_1_owner** %managed.unique.1.class_method_access_1_test.instance_owner, align 8
%var32 = load %class.class_method_access_1_owner** %managed.unique.1.class_method_access_1_test.instance_owner, align 8
%var33 = call i32 @class_method_access_1_owner.getSize(%class.class_method_access_1_owner* %var32)
%var34 = alloca i32, align 4
store i32 %var33, i32* %var34, align 4
%var35 = load i32* %var34, align 4
ret i32 %var35
unreachable
}

