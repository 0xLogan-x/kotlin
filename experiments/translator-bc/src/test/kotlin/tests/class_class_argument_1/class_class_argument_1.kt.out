@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
%class.class_class_argument_1_slave = type {  }
%class.class_class_argument_1_master = type { %class.class_class_argument_1_slave*, i32 }
define weak void @class_class_argument_1_slave(%class.class_class_argument_1_slave*  %classvariable.this) #0
{
%classvariable.this.addr = alloca %class.class_class_argument_1_slave, align 8
%var2 = bitcast %class.class_class_argument_1_slave* %classvariable.this to i8*
%var3 = bitcast %class.class_class_argument_1_slave* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var2, i8* %var3, i64 0, i32 4, i1 false)
ret void 
unreachable
}
define weak void @class_class_argument_1_master_Ref_class_class_argument_1_slave(%class.class_class_argument_1_master*  %classvariable.this, %class.class_class_argument_1_slave*  %class_class_argument_1_master.buffer) #0
{
%classvariable.this.addr = alloca %class.class_class_argument_1_master, align 8
%var4 = getelementptr inbounds %class.class_class_argument_1_master* %classvariable.this.addr, i32 0, i32 0
store %class.class_class_argument_1_slave* %class_class_argument_1_master.buffer, %class.class_class_argument_1_slave** %var4, align 8
%var5 = getelementptr inbounds %class.class_class_argument_1_master* %classvariable.this.addr, i32 0, i32 1
%var6 = load i32* %var5, align 4
store i32 99999, i32* %var5, align 4
%var7 = bitcast %class.class_class_argument_1_master* %classvariable.this to i8*
%var8 = bitcast %class.class_class_argument_1_master* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var7, i8* %var8, i64 16, i32 4, i1 false)
ret void 
unreachable
}
define weak i32 @class_class_argument_1() #0
{
%var10 = call i8* @malloc_heap(i32 0)
%var9 = bitcast i8* %var10 to %class.class_class_argument_1_slave*
%var11 = alloca %class.class_class_argument_1_slave*, align 8
store %class.class_class_argument_1_slave* %var9, %class.class_class_argument_1_slave** %var11, align 8
call void @class_class_argument_1_slave(%class.class_class_argument_1_slave* %var9)
%managed.unique.0.class_class_argument_1.buffer = alloca %class.class_class_argument_1_slave*, align 8
%var12 = load %class.class_class_argument_1_slave** %managed.unique.0.class_class_argument_1.buffer, align 8
%var13 = load %class.class_class_argument_1_slave** %var11, align 8
store %class.class_class_argument_1_slave* %var13, %class.class_class_argument_1_slave** %managed.unique.0.class_class_argument_1.buffer, align 8
%var14 = load %class.class_class_argument_1_slave** %managed.unique.0.class_class_argument_1.buffer, align 8
%var16 = call i8* @malloc_heap(i32 16)
%var15 = bitcast i8* %var16 to %class.class_class_argument_1_master*
%var17 = alloca %class.class_class_argument_1_master*, align 8
store %class.class_class_argument_1_master* %var15, %class.class_class_argument_1_master** %var17, align 8
call void @class_class_argument_1_master_Ref_class_class_argument_1_slave(%class.class_class_argument_1_master* %var15, %class.class_class_argument_1_slave* %var14)
%managed.unique.1.class_class_argument_1.output = alloca %class.class_class_argument_1_master*, align 8
%var18 = load %class.class_class_argument_1_master** %managed.unique.1.class_class_argument_1.output, align 8
%var19 = load %class.class_class_argument_1_master** %var17, align 8
store %class.class_class_argument_1_master* %var19, %class.class_class_argument_1_master** %managed.unique.1.class_class_argument_1.output, align 8
%var20 = load %class.class_class_argument_1_master** %managed.unique.1.class_class_argument_1.output, align 8
%var21 = getelementptr inbounds %class.class_class_argument_1_master* %var20, i32 0, i32 1
%var22 = load i32* %var21, align 4
ret i32 %var22
unreachable
}

