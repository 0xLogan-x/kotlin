@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
define weak i64 @different_type_binary_operator_1_shl_Int_Long(i32  %different_type_binary_operator_1_shl.x, i64  %different_type_binary_operator_1_shl.y) #0
{
%different_type_binary_operator_1_shl.x.addr = alloca i32, align 4
store i32 %different_type_binary_operator_1_shl.x, i32* %different_type_binary_operator_1_shl.x.addr, align 4
%different_type_binary_operator_1_shl.y.addr = alloca i64, align 8
store i64 %different_type_binary_operator_1_shl.y, i64* %different_type_binary_operator_1_shl.y.addr, align 8
%var2 = load i64* %different_type_binary_operator_1_shl.y.addr, align 8
%var3 = load i32* %different_type_binary_operator_1_shl.x.addr, align 4
%var4 = load i64* %different_type_binary_operator_1_shl.y.addr, align 8
%var5 =  sext i32 %var3 to i64
%var6 = shl i64 %var4, %var5
ret i64 %var6
unreachable
}
define weak i64 @different_type_binary_operator_1_ushr_Int_Long(i32  %different_type_binary_operator_1_ushr.x, i64  %different_type_binary_operator_1_ushr.y) #0
{
%different_type_binary_operator_1_ushr.x.addr = alloca i32, align 4
store i32 %different_type_binary_operator_1_ushr.x, i32* %different_type_binary_operator_1_ushr.x.addr, align 4
%different_type_binary_operator_1_ushr.y.addr = alloca i64, align 8
store i64 %different_type_binary_operator_1_ushr.y, i64* %different_type_binary_operator_1_ushr.y.addr, align 8
%var7 = load i64* %different_type_binary_operator_1_ushr.y.addr, align 8
%var8 = load i32* %different_type_binary_operator_1_ushr.x.addr, align 4
%var9 = load i64* %different_type_binary_operator_1_ushr.y.addr, align 8
%var10 =  sext i32 %var8 to i64
%var11 = lshr i64 %var9, %var10
ret i64 %var11
unreachable
}
define weak i64 @different_type_binary_operator_1_shr_Int_Long(i32  %different_type_binary_operator_1_shr.x, i64  %different_type_binary_operator_1_shr.y) #0
{
%different_type_binary_operator_1_shr.x.addr = alloca i32, align 4
store i32 %different_type_binary_operator_1_shr.x, i32* %different_type_binary_operator_1_shr.x.addr, align 4
%different_type_binary_operator_1_shr.y.addr = alloca i64, align 8
store i64 %different_type_binary_operator_1_shr.y, i64* %different_type_binary_operator_1_shr.y.addr, align 8
%var12 = load i64* %different_type_binary_operator_1_shr.y.addr, align 8
%var13 = load i32* %different_type_binary_operator_1_shr.x.addr, align 4
%var14 = load i64* %different_type_binary_operator_1_shr.y.addr, align 8
%var15 =  sext i32 %var13 to i64
%var16 = ashr i64 %var14, %var15
ret i64 %var16
unreachable
}

