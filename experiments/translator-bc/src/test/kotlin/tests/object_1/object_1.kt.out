@exceptions.str.1 = private unnamed_addr constant  [59 x i8] c"Exception in thread main kotlin.KotlinNullPointerException\00", align 1
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1)
declare i8* @malloc_heap(i32)
declare i32 @printf(i8*, ...)
declare void @abort()
%class.Nothing = type { }
%class.Singleton = type { i32 }
@object.instance.Singleton = internal global %class.Singleton { i32 123456789 }, align 8
define weak void @Singleton(%class.Singleton*  %classvariable.this) #0
{
%classvariable.this.addr = alloca %class.Singleton, align 8
%var2 = getelementptr inbounds %class.Singleton* %classvariable.this.addr, i32 0, i32 0
%var3 = load i32* %var2, align 4
store i32 123456789, i32* %var2, align 4
%var4 = bitcast %class.Singleton* %classvariable.this to i8*
%var5 = bitcast %class.Singleton* %classvariable.this.addr to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* %var4, i8* %var5, i64 4, i32 4, i1 false)
ret void 
unreachable
}
define weak i32 @Singleton.create_Int(%class.Singleton*  %classvariable.this, i32  %Singleton.create.x) #0
{
%Singleton.create.x.addr = alloca i32, align 4
store i32 %Singleton.create.x, i32* %Singleton.create.x.addr, align 4
%var6 = load i32* %Singleton.create.x.addr, align 4
%var7 = mul nsw i32 %var6, 8
ret i32 %var7
unreachable
}
define weak i32 @singleton_test_Int(i32  %singleton_test.i) #0
{
%singleton_test.i.addr = alloca i32, align 4
store i32 %singleton_test.i, i32* %singleton_test.i.addr, align 4
%var8 = load i32* %singleton_test.i.addr, align 4
%var9 = call i32 @Singleton.create_Int(%class.Singleton* @object.instance.Singleton, i32 %var8)
%var10 = alloca i32, align 4
store i32 %var9, i32* %var10, align 4
%var11 = load i32* %var10, align 4
ret i32 %var11
unreachable
}
define weak i32 @singleton_test2() #0
{
%var12 = getelementptr inbounds %class.Singleton* @object.instance.Singleton, i32 0, i32 0
%var13 = load i32* %var12, align 4
ret i32 %var13
unreachable
}

